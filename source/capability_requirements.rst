功能要求
-----------------------
由于Fabric是一个通常涉及多个组织的分布式系统（有时在不同的国家甚至大陆），
因此网络中可能（并且通常）存在许多不同版本的Fabric代码。
然而，网络以相同的方式处理事务以使每个人对当前网络状态具有相同的视图是至关重要的。

这意味着每个网络 - 以及该网络中的每个通道 - 必须定义一组我们称之为“功能”的能够参与处理交易的东西。
例如，Fabric v1.1引入了新的MSP角色类型“Peer”和“Client”。
但是，如果v1.0的peer不理解这些新角色类型，则无法正确评估引用它们的背书策略。
这意味着在可以使用新角色类型之前，网络必须同意启用v1.1 ``通道`` 功能要求，确保所有peer做出相同的决策。

只有支持所需功能的二进制文件才能参与该通道，而较新的二进制版本在启用相应功能之前不会启用新的验证逻辑。
通过这种方式，功能要求确保即使使用不同的构建和版本，网络也不可能遭受状态分叉。

定义功能要求
================================

通道配置中的每个通道都定义了功能要求（可在通道的最新配置块中找到）。
通道配置包含三个位置，每个位置定义了不同类型的功能。

+------------------+-----------------------------------+----------------------------------------------------+
| 功能类型           | 典范（Canonical）路径               | JSON 路径                                           |
+==================+===================================+====================================================+
| 通道              | /Channel/Capabilities             | .channel_group.values.Capabilities                 |
+------------------+-----------------------------------+----------------------------------------------------+
| 排序节点           | /Channel/Orderer/Capabilities     | .channel_group.groups.Orderer.values.Capabilities  |
+------------------+-----------------------------------+----------------------------------------------------+
| 应用              | /Channel/Application/Capabilities | .channel_group.groups.Application.values.          |
|                  |                                   | Capabilities                                       |
+------------------+-----------------------------------+----------------------------------------------------+

通道：这些功能适用于对等和订购者，并且位于根通道组中。
订货人：仅适用于订货人，位于订货人组。
应用程序：仅适用于对等项，位于“应用程序”组中。

* **通道:** 这些功能适用于peer和排序节点，并且位于根 ``通道`` 组中。

* **排序节点:** 仅适用于排序节点，位于订 ``排序节点`` 组

* **应用程序:** 仅适用于peer，位于 ``应用程序`` 组中

这些功能被分解为这些组，以便与现有的管理结构保持一致。
更新排序节点功能是排序组织独立于应用程序组织管理的内容。
同样，更新应用程序功能只是应用程序管理员可以管理的内容。
假设网络可以运行v1.6排序服务，那么通过在“排序节点”和“应用程序”之间拆分功能，就同时支持v1.3对等应用程序网络。

但是，某些功能跨越了“应用程序”和“排序节点”组。
如前所述，添加新的MSP角色类型，这是排序节点和应用程序管理员应该同意并识别的内容。
排序节点必须理解MSP角色的含义，以便允许事务通过排序，而peer必须理解角色才能验证事务。
这些功能 - 跨越应用程序和排序节点组件 - 在顶级“通道”组中定义。


.. note:: 有一种可能，比如说通道功能定义为版本v1.3，而排序节点和应用程序功能分别定义为版本1.1和v1.4。
          在“通道”组级别启用功能并不意味着在更具体的“排序节点”和“应用程序”组级别上可以使用相同的功能。

设定功能
====================

功能被设置为通道配置的一部。要么作为初始配置的一部分（我们将在稍后讨论）， 要么作为重新配置的一部分。

.. note:: 我们有两个文档，分别介绍了通道重新配置的不同方面。首先，我们有一个教程，将指导您完成 :doc:`channel_update_tutorial` 的过程。
          我们还有一个文档，讨论了 :doc:`config_update`，该配置概述了可能的各种更新以及更全面的签名过程。


由于新通道默认复制Orderer系统通道的配置，因此将自动配置新通道，从而可以使用Orderer系统通道的排序功能和，通道功能以及通道创建事务指定的应用程序功能。
但是，已存在的通道必须重新配置。

功能值的模式在protobuf中定义为：

.. code:: bash

  message Capabilities {
        map<string, Capability> capabilities = 1;
  }

  message Capability { }

作为示例，以JSON呈现：

.. code:: bash

  {
      "capabilities": {
          "V1_1": {}
      }
  }

初始配置中的功能
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

在发布工件的 ``config`` 目录中的` `configtx.yaml`` 文件中，有一个``Capabilities``部分，
它列出了每种功能类型（Channel，Orderer和Application）的可能功能。

启用功能的最简单方法是选择v1.1示例配置文件，并为您的网络自定义它。例如：

.. code:: bash

    SampleSingleMSPSoloV1_1:
        Capabilities:
            <<: *GlobalCapabilities
        Orderer:
            <<: *OrdererDefaults
            Organizations:
                - *SampleOrg
            Capabilities:
                <<: *OrdererCapabilities
        Consortiums:
            SampleConsortium:
                Organizations:
                    - *SampleOrg

请注意，在根级别（对于通道功能）和排序节点级别（对于orderer功能）定义了 ``Capabilities`` 部分。
上面的示例使用YAML引用来包括YAML底部定义的功能。

定义排序节点系统通道时，没有应用程序部分，因为这些功能是在创建应用程序通道期间定义的。
要在创建通道时定义新通道的应用功能，应用管理员应在 ``SampleSingleMSPChannelV1_1`` 配置文件之后为其通道创建事务建模。



.. code:: bash

   SampleSingleMSPChannelV1_1:
        Consortium: SampleConsortium
        Application:
            Organizations:
                - *SampleOrg
            Capabilities:
                <<: *ApplicationCapabilities

这里，Application部分有一个新元素 ``Capabilities``，它引用了在YAML末尾定义的 ``ApplicationCapabilities``  部分。


.. note:: 注意Channel和Orderer部分的功能继承自排序系统通道中的定义，并且在创建通道的过程中由排序节点自动包含。

.. Licensed under Creative Commons Attribution 4.0 International License
   https://creativecommons.org/licenses/by/4.0/
